build "det_base" {
    depends ["xinx" "shared"]
    target { modpath "det/compiler/playground.x" defname "main" deftype "Procedure" }
    target { modpath "det/compiler/playground.x" defname "test_main" deftype "Procedure" }
    entrypoint { modpath "det/compiler/tool.x" defname "tool_main" deftype "Procedure" }
    description "DET Parser Generator (Abstract module indented to include in various targets)"

    supply { prefix "det/compiler/asm/optimizer/" namespace "det.compiler.asm.optimizer.internals" }
    supply { prefix "det/compiler/asm/render.x" namespace "det.compiler.asm.render.internals" }
    supply { prefix "det/compiler/asm/stats.x" namespace "det.compiler.asm.stats.internals" }

    namespace "det.compiler.imports" { include "lib.timing" include "xinx" }

    namespace "det.compiler.api" { load "compiler/api.ns" }

    supply { prefix "common/" namespace "det.common.internals" }
    namespace "det.common.internals" { import "det.compiler.imports" }
    namespace "det.examples.internals" { import "det.compiler.imports" }

    namespace "det.tools.keyword" { load "tools/keyword_generator.ns" }
    namespace "det.tools.keyword.internals" {
        include "det.tools.keyword"
        include "det.compiler.paths"
        include "lib.data.trie"
        import "det.compiler.imports"
    }

    namespace "det.compiler.driver" { load "compiler/driver.ns" }
    namespace "det.compiler.driver.internals" {
        include "det.compiler.driver"
        include "det.compiler.paths"
        include "det.compiler.bootstrap.api"
        include "det.compiler.optimizers.api"
        include "det.compiler.targets.python.api"
        include "det.compiler.input.line_offsets.api"
        include "det.compiler.pipeline.rename_locals.api"
        include "det.compiler.pipeline.concat_partials.api"
        include "det.compiler.pipeline.fix_sem.api"
        include "det.compiler.asm.targets.interp.api"
        ;;include "det.compiler.logic.api"
        include "det.compiler.metatheorems.api"
        include "lib.compilers.scope"
        include "lib.compilers.python"
        import "det.compiler.imports"
    }
}
